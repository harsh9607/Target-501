/*
Loop detection in Linked list with maps
*/
#include <iostream>
#include<map>
using namespace std;

struct link{
    
    link* next; 
    int data ; 
};

class LinkedList
{
  public: link* head; 
          link* tail; 
          int size; 
          
          LinkedList() : head(NULL), tail(NULL) , size(0)
          {}
          
          void display()
          {
           
            link* temp = head; 
            while(temp!= NULL)
            {
                cout<<temp->data<<"\t";
                temp = temp->next; 
            }
              
          }
          
          void addItem(int d)
          {
              link*temp = new link; 
              temp->data = d;
              if(size ==0 )
              {
                  temp->next = NULL; 
                  tail = temp; 
                  head = temp; 
                  size++;
              }
              
              else
              {
                  temp->next = NULL; 
                  tail->next = temp;
                  tail = temp; 
                  size++;
                  
              }
          }
          
          void loop_creator()
          {
              tail->next = head->next->next->next;
          }
          
          bool LoopDetection_via_hashmaps()
          {
              if(head==NULL)
              {
                  cout<<"NO LIST";
                  return 0;
              }
              
              else
              {
                  map<link* , bool> visited; 
                  link*temp = head; 
                  while(temp!= NULL)
                  {
                      if(visited[temp])
                      {
                          cout<<"LOOP DETECTED";
                          return 1;
                      }
                      
                      visited[temp] = true; 
                      temp = temp->next; 
                      
                      
                      
                  }
              }
              cout<<"NO LOOP";
              return 0;
          }
          
};

int main()
{
    
    LinkedList l1 ; 
    l1.addItem(1);
    l1.addItem(2);
    l1.addItem(3);
    l1.addItem(4);
    l1.addItem(5);
    l1.addItem(6);
    l1.loop_creator();
    //l1.display();
     l1.LoopDetection_via_hashmaps();
    
    
    return 0;
}
