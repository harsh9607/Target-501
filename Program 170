// Smart Pointers - Self study from cppreference and cplusplus.com 
#include <iostream>
#include<memory>
using namespace std;

int main()
{   
    /*
    List of Unique pointers built-in functions 
    1. move 
    2. Release 
    3. swap 
    4. get 
    */

    // Move 
    std::unique_ptr<int> P1 = make_unique<int>( 10 ) ;
    std::unique_ptr<int> P2 = std::move(P1);
    cout << *P2<<endl ;  
    
    // Release 
    int* temp = P2.release(); 
    cout << *temp<<endl; 
    delete temp;

    // get - returns a pointer to the object being pointed by unique_ptr 
    std::unique_ptr<int> P3 = make_unique<int>(30);
    int* X = P3.get();
    *X += 1;
    cout << *X <<endl;

    // swap 
    unique_ptr<int> a = make_unique<int>(1);
    unique_ptr<int> b = make_unique<int>(2);
    cout << "Before Swapping a = " << *a << " & b = " << *b << endl;
    a.swap(b); 
    cout << "After Swapping a = " << *a << " & b = " << *b << endl;

    return 0;
}
