/*
Generic Trees !  
*/
#include <iostream>
#include<vector>
#include<stack>
using namespace std; 

struct node
{
    int data;
    vector<node*> children; 
};

class Tree
{

public: node* root;
        int size = 0;
      
      Tree() : root(NULL)
      {}

      void addItem(int A[] , int size_ , stack<node*> S )
      {
          for (int i = 0; i < size_; i++)
          {
              if (A[i] == -1)
              {
                  S.pop(); 
              }

              else
              {
                  node* temp = new node; 
                  temp->data = A[i]; 
                  
                  if (S.empty())
                  {
                      root = temp; 
                      S.push(root); 
                  }

                  else
                  {
                      S.top()->children.push_back(temp);
                      S.push(temp); 
                  }
              }
          }
      }

      void display(node * r )
      {
          node* temp = r;
          cout << temp->data<<"-> ";
          for (node* it : temp->children)
          {
              cout << it->data << ", ";

          }
          cout << ";" << endl;

          for (node* it : temp->children)
          {
              display(it);

          }

      }
     
      int size_of_tree(node* r )
      {   
           
          node*  temp = r;
          size++;

          for (node* it : temp->children)
          {
              size_of_tree(it);
          }
         
          return size; 
      }

      int size_of_tree(node* r , int&  i )
      {

          node* temp = r;
          i++; 

          for (node* it : temp->children)
          {
              size_of_tree(it,i);
          }

          return i;
      }


};



int main()
{
    int A[] = { 10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1 } ;
    int A2[] = { 5,10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1 };
    Tree T , T2 ; 
    int size_A = sizeof(A) / sizeof(A[0]);
    stack<node* > s1;
     
    // Add item for Tree 1 
    T.addItem(A,size_A,s1);
    T.display(T.root);

    // Calc size 
    int y = 0; 
    int x = T.size_of_tree(T.root);
    cout << "Size of T1 = " << x<<endl;
    
    // Add item for Tree 2  
    T2.addItem(A2, size_A + 1, s1);
    x = T2.size_of_tree(T2.root, y );
    cout << "Size of T2 = " << x << endl;
    
    return 0;
}

