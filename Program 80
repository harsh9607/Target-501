/******************************************************************************
Removal of leaf from a Gerneric  tree 
*******************************************************************************/
#include <iostream>
#include <vector> 
#include <stack>
#include <queue>

using namespace std;

struct node
{
    int data ; 
    vector<node* > children; 
    
}; 

class Tree
{
    public : node* root;
            
            void additem(int A[] , int size , stack<node*> S )
            {
                
                
                for(int i=0 ;  i<size ; i++  )
                {
                    if(A[i]==-1)
                    {
                        S.pop(); 
                    }
                    else
                    {   // Creating a new node 
                        node* temp = new node;
                        
                        if(S.empty())
                        {
                            temp->data = A[i]; 
                            root = temp; 
                            S.push(root); 
                        }
                        else
                        {
                            temp->data = A[i]; 
                            S.top()->children.push_back(temp);
                            S.push(temp); 
                        }
                        
                    }
                }
                
                
            }
            
            void Display(node * r )
            {
                node* temp = r ; 
                cout<<temp->data<<"-> "; 
                for(node* it : temp->children)
                {
                    
                    cout<<(*it).data<<", " ; 
                }
                cout<<";"<<endl;
                for(node* it : temp->children)
                {
                    
                    Display(it); 
                }
                
            }
            
            
            void Remove_leaves(node * r )
            {
                
                node* temp =  r ;
                
                    for(int i = temp->children.size() - 1   ; i>=0 ; i--) 
                    {
                        node *child = temp->children[i];
                        if(child->children.size() ==0 )
                        {   
                            vector<node*>:: iterator it = find(temp->children.begin(),temp->children.end(),child);  
                            // Erase function takes a pointer to that value as argument. 
                            temp->children.erase(it) ; 
                        }
                    }
                    
                    
                    
                    for(node* it : temp->children)
                    {  
                        Remove_leaves(it);    
                    }
            }
};



int main()
{
    int A[] = { 10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1};
    int size_A = sizeof(A)/sizeof(A[0]); 
    stack<node* > S;
    Tree T ; 
    T.additem(A,size_A, S); 
   
    
    T.Remove_leaves(T.root); 
    T.Display(T.root);
    
    return 0;
}
