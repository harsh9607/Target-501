/******************************************************************************
Ceil Floor of trees
*******************************************************************************/
#include <iostream>
#include <vector> 
#include <stack>
#include <queue>

using namespace std;

struct node
{
    int data;
    vector<node* > children;

};

class Tree
{
public: node* root;

      void Display(node* r)
      {
          node* temp = r;
          cout << temp->data << " -> ";
          for (node* it : temp->children)
          {
              cout << it->data << ", ";
          }
          cout << ";" << endl;
          for (node* it : temp->children)
          {
              Display(it);
          }


      }

      void additem(int A[], int size_a, stack<node*> S)
      {

          for (int i = 0; i < size_a; i++)
          {
              if (A[i] == -1)
              {
                  S.pop();
              }

              else
              {
                  node* temp = new node;
                  if (S.empty())
                  {
                      temp->data = A[i];
                      root = temp;
                      S.push(temp);
                  }

                  else
                  {
                      temp->data = A[i];
                      S.top()->children.push_back(temp);
                      S.push(temp);
                  }
              }

          }
      }


      void Ceil_Floor(node* r, int d, int& _ceil, int& _floor) {

          node* temp = r;
          //  For Floor 
          int diff1 = d - temp->data;
          if (diff1 > 0  && diff1 < (d - _floor))
          {
              _floor = temp->data;
          }
          // For Ceil 
          int diff2 = temp->data - d;
          if (diff2 > 0 && (diff2 < _ceil - d))
          {
              _ceil = temp->data;
          }
          for (auto child : temp->children)
          {
              Ceil_Floor(child, d, _ceil, _floor);
          }

      }

      
      
      int height_of_deepest_node(node* r , int &dch , int &sdch , int& dia)
      {
          int ht = -1; 

          node* temp = r; 
          for (auto ch : temp->children)
          {
              int x = height_of_deepest_node(ch , dch, sdch, dia); 
              if (x > ht)
              {  // height and deepest child height are same
                  // returning ht or dch are same.
                  ht = x;
                  sdch = dch; 
                  dch = ht; 
              }
              else if (x > sdch)
              {
                  sdch = x;
              }
          }
          
          if (dch + sdch + 2 > dia)
          {
              dia = dch + sdch + 2; 
          }


          return (ht+1); 
      }

};


int main()
{
    int A[] = { 10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1 };
    int A2[] = { 10,20,50,-1,60,-1,-1,30,70,600,-1,-1,80,120,-1,-1,90,-1,-1,40,100,-1,500,-1,-1,-1 };
    int size_A = sizeof(A) / sizeof(A[0]);
    int size_A2 = sizeof(A2) / sizeof(A2[0]);
    stack<node* > S, S2;
    Tree T, T2;
    T.additem(A, size_A, S);
    T2.additem(A2, size_A2, S2);
    T.Display(T.root);
    T2.Display(T2.root);

    int length = 0 , length2 = 0 , dia = 0 ;

    T.height_of_deepest_node(T.root , length , length2 , dia ); 
    
    cout << "\n Total diameter = " << dia; 

    return 0;
}
