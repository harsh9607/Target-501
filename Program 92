/******************************************************************************
Largest Sub tree in a  generic tree
*******************************************************************************/
#include <iostream>
#include <vector> 
#include <stack>
#include <queue>

using namespace std;

struct node
{
    int data;
    vector<node* > children;

};

class Tree
{
public: node* root;

      void Display(node* r)
      {
          node* temp = r;
          cout << temp->data << " -> ";
          for (node* it : temp->children)
          {
              cout << it->data << ", ";
          }
          cout << ";" << endl;
          for (node* it : temp->children)
          {
              Display(it);
          }


      }

      void additem(int A[], int size_a, stack<node*> S)
      {

          for (int i = 0; i < size_a; i++)
          {
              if (A[i] == -1)
              {
                  S.pop();
              }

              else
              {
                  node* temp = new node;
                  if (S.empty())
                  {
                      temp->data = A[i];
                      root = temp;
                      S.push(temp);
                  }

                  else
                  {
                      temp->data = A[i];
                      S.top()->children.push_back(temp);
                      S.push(temp);
                  }
              }

          }
      }


      void Ceil_Floor(node* r, int d, int& _ceil, int& _floor) {

          node* temp = r;
          //  For Floor 
          int diff1 = d - temp->data;
          if (diff1 > 0  && diff1 < (d - _floor))
          {
              _floor = temp->data;
          }
          // For Ceil 
          int diff2 = temp->data - d;
          if (diff2 > 0 && (diff2 < _ceil - d))
          {
              _ceil = temp->data;
          }
          for (auto child : temp->children)
          {
              Ceil_Floor(child, d, _ceil, _floor);
          }

      }

      void Largest_Subtree(node* r, int& largest, int& Nvalue , int& Sub_Tree_sum)
      {     
          node* temp = r; 
          int x = 0; 
          for (auto it : temp->children)
          {
              Largest_Subtree(it, largest, Nvalue , Sub_Tree_sum); 
              x += Sub_Tree_sum;
          }
          
          x += temp->data;
          Sub_Tree_sum = x; 
          if (x > largest)
          {
              Nvalue = temp->data; 
              largest = x; 
          }
      }

     

};


int main()
{
    int A[] = { 10,20,-50,-1,-60,-1,-1,30,-70,-1,80,-110,-1,120,-1,-1,90,-1,-1,40,-100,-1,-1,-1 };
    int A2[] = { 10,20,50,-1,60,-1,-1,30,70,600,-1,-1,80,120,-1,-1,90,-1,-1,40,100,-1,500,-1,-1,-1 };
    int size_A = sizeof(A) / sizeof(A[0]);
    int size_A2 = sizeof(A2) / sizeof(A2[0]);
    stack<node* > S, S2;
    Tree T, T2;
    T.additem(A, size_A, S);
    T2.additem(A2, size_A2, S2);
    T.Display(T.root);
    T2.Display(T2.root);

    int largest = INT_MIN ,Nvalue= 0 , Sub_tree_sum = 0  ;
    node* temp2 = new node; 
    T.Largest_Subtree(T.root, largest, Nvalue, Sub_tree_sum ); 
    //cout << "largest = " << largest << " at node value " << temp2->data;
    cout << "largest = " << largest << " at node value " << Nvalue;
    
    return 0;
}
