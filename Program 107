// Diameter of a Binary Tree 
#include<iostream>
#include<stack>
#include<queue>
using namespace std; 

class node
{
public:
	int data; 
	node* left; 
	node* right; 
	// Constructor
   node() :data(0), left(NULL), right(NULL)
		{}
};

class BinaryTree
{
public: node* root; 
	   BinaryTree() :root(NULL) 
		{}
	  ~BinaryTree()
		{}
	  
	  void Additem(int A[], char B[], int size_A , int size_B , stack<node*> S)
	  {   
		  int k = 0;
		  for (int i = 0; i < size_B; i++)
		  {
			  if (B[i] == 'O')
			  {
				  node* temp = new node; 
				  temp->data = A[k]; 
				  root = temp; 
				  S.push(root); 
				  k++; 
			  }

			  else if (B[i] == 'L')
			  {   
				  node* temp = new node; 
				  temp->data = A[k]; 
				  k++;
				  S.top()->left = temp; 
				  S.push(temp); 
			  }


			  else if (B[i] == 'R')
			  {
				  node* temp = new node;
				  temp->data = A[k];
				  k++;
				  S.top()->right = temp;
				  S.push(temp);
			  }

			  else if (B[i] == 'P')
			  {
				  S.pop(); 
			  }

		  }
			  
	  }
	   
	  void Display(node* r)
	  {  
		  if (r != NULL) {
			  
			  cout << "Node: " << r->data << " -> L :  ";
			  if(r->left!=NULL)
			  {
				  cout << r->left->data << ",\t"; 
			  }
			  else
			  {
				  cout << "NULL,  "; 
			  }
			  if (r->right != NULL)
			  {
				  cout<<"R:" << r->right->data << ";\n";
			  }
			  else
			  {
				  cout << "R: NULL;\n"; 
			  }
			  
			  Display(r->left);
			  Display(r->right);
		  }
		  else
		  {
			  return;
		  }
	  }
	
	  int Diameter_of_BST(node* r, int& dia , int &sdch , int &dch)
	  {
		  int ht = -1;
		  node* temp = r;
		  if (temp == NULL)
		  {
			  return -1;
			  dia = 0; 
		  }
		  else
		  {
			 

			  int l_max_ht = Diameter_of_BST(temp->left, dia , sdch , dch);
			  int L_dia = dia; 
			  int r_max_ht = Diameter_of_BST(temp->right, dia, sdch , dch);
			  int R_dia = dia; 
			   
			  if (l_max_ht > r_max_ht)
			  {
				  ht = l_max_ht;
				  dch = ht; 
				  // Please note DCH & Ht are the same things.
				  sdch = r_max_ht; 
			  }
			  else
			  {
				  ht = r_max_ht; 
				  dch = ht; 
				  sdch = l_max_ht; 
			  }
			  cout << "for node ->" << temp->data << " dch = " << ht; 
			  cout << " & 2nd dch = " << sdch;
			 
			  // Dia will be max of left child dia , right child dia , new dia ie.  if the node itself was a path (dch+2dch+2) 
			  int new_dia = max( (dch+sdch+2), max(L_dia , R_dia ) );
			  
			  dia = new_dia;
			  cout <<  "Final dia = " << dia << endl;
			 

			  return ht + 1;

		  }


	  }
};


int main()
{    
	int A[] = {   1 ,  2 ,   6 ,  8 , 12 ,     13  ,             9   , 14  ,       15 , 16,   18  , 22 ,            19 , 23 ,                                7  , 10  ,     11  ,             3        }; 
	char B[] = { 'O', 'L' , 'L', 'L','L' ,'P', 'R' , 'P', 'P' ,  'R' , 'L' , 'P' ,'R' , 'L' , 'L' , 'L','P' ,'P' , 'R' , 'R' ,'P','P' , 'P', 'P' ,'P' , 'P', 'R', 'L' , 'P', 'R','P','P' ,'P', 'R' ,'P'};
	BinaryTree T;
	stack<node*> S; 
	int s_A = sizeof(A) / sizeof(A[0]); 
	int s_B = sizeof(B) / sizeof(B[0]); 
	
	T.Additem(A, B, s_A, s_B ,S) ;
	
	T.Display(T.root);
	int dia = 0, dch = -1, sdch = -1; 
	int ht = T.Diameter_of_BST(T.root, dia,sdch ,dch);
	cout << "Diameter = " << dia; 
	return 0;
}
