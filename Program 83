/******************************************************************************
Node2RootPath
*******************************************************************************/
#include <iostream>
#include <vector> 
#include <stack>
#include <queue>

using namespace std;

struct node
{
    int data;
    vector<node* > children;

};

class Tree
{
public: node* root;

      void Display(node* r)
      {
          node* temp = r;
          cout << temp->data << " -> ";
          for (node* it : temp->children)
          {
              cout << it->data << ", ";
          }
          cout << ";" << endl;
          for (node* it : temp->children)
          {
              Display(it);
          }


      }

      void additem(int A[], int size_a, stack<node*> S)
      {

          for (int i = 0; i < size_a; i++)
          {
              if (A[i] == -1)
              {
                  S.pop();
              }

              else
              {
                  node* temp = new node;
                  if (S.empty())
                  {
                      temp->data = A[i];
                      root = temp;
                      S.push(temp);
                  }

                  else
                  {
                      temp->data = A[i];
                      S.top()->children.push_back(temp);
                      S.push(temp);
                  }
              }

          }
      }

      

      bool Node2RootPath(node* r, int d , vector<int> &V)
      {
        
          node* temp = r; 
          if (temp->data == d)
          {
              V.push_back(temp->data); 
              return true; 
          }
          for (node* child : temp->children)
          {
              bool ans = Node2RootPath(child, d ,V ); 
              if (ans)
              {
                  V.push_back(temp->data); 
                  return true; 
              }
     
          }

          return false;
      }

      
     
};



int main()
{
    int A[] = { 10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1 };
    int size_A = sizeof(A) / sizeof(A[0]);
    stack<node* > S;
    Tree T, T2;
    T.additem(A, size_A, S);
    T.Display(T.root);
    vector<int> V ;
    T.Node2RootPath(T.root , 80 , V);
    for (int it = 0 ; it< V.size() ; it++ )
    {
        if (it == V.size() - 1)
        {
            cout << V[it] << "\t";
        }
        else
        {
            cout << V[it] << endl;
            cout << " \\ " << endl;
           
        }
        
    }
    
    return 0;
}
