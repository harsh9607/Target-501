/*
Level order traversal  of Generic Trees !  
*/
#include <iostream>
#include<vector>
#include<queue> 
#include<stack>
#include<algorithm>
using namespace std; 

struct node
{
    int data;
    vector<node*> children; 
};

class Tree
{

public: node* root;
        int size = 0;
      
      Tree() : root(NULL)
      {}

      void addItem(int A[] , int size_ , stack<node*> S )
      {
          for (int i = 0; i < size_; i++)
          {
              if (A[i] == -1)
              {
                  S.pop(); 
              }

              else
              {
                  node* temp = new node; 
                  temp->data = A[i]; 
                  
                  if (S.empty())
                  {
                      root = temp; 
                      S.push(root); 
                  }

                  else
                  {
                      S.top()->children.push_back(temp);
                      S.push(temp); 
                  }
              }
          }
      }
        
      
      void display(node* r)
      {
          node*temp = r ;
          cout<<temp->data<<"-> "; 
          for(node* it : temp->children)
          {
              cout<<it->data<<", ";
          }
          cout<<";"<<endl;
          for(node* it : temp->children)
          {
             display(it);
          }
          
      }
        
      
      void Level_Order(node* r , queue<node*> &Q)
      {
        
        node *temp = r ;
        
        // Inserting Root node 
        if(Q.empty())
        {
            Q.push(temp);
        }
        
        // Inserting children of the node
        for(node* it : temp->children)
        {
            Q.push(it);
            
        }
        
        cout<<Q.front()->data<<", ";
        
        Q.pop();
        
        if(!Q.empty())
        {
         
         Level_Order_helper(Q.front() , Q);
            
        }
          
        
          
      }
      
     
};


int main()
{
    int A[] = { 10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1 } ;
    
    Tree T ; 
    int size_A = sizeof(A) / sizeof(A[0]);
    queue<node* > q1;
    stack<node* > s1; 
     
    T.addItem(A,size_A,s1);
    T.display(T.root);
    T.Level_Order(T.root , q1) ;
   
    
    return 0;
}
