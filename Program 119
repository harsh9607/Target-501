//First and Last index using Binary search 

#include <iostream>
#include<vector>
using namespace std; 

void display(int A[], int s)
{
	for (int i = 0; i < s; i++)
	{
		cout << A[i] << '\t'; 
	}
	cout << endl;
}

int  BSearch(int A[], int s , float d , int low , int high  )
{
	
	int mid = (low+high) / 2; 
	int flag = 0; 
	int x = -1; 
	while (low <= high)
	{
		mid = (low + high) / 2; 
		if (d == A[mid])
		{
			x = mid; 
			flag++; 
			break;
		}
		else if (d < A[mid])
		{
			 
			high = mid-1 ;

		}
		else if (d > A[mid])
		{
			low = mid + 1; 
		}
	}
	
	
	return x; 
}

// 1. Find the index where it is present; .. Done  
// 2. Adjust low and high so thats its not the element.
// 3. Keep adjusting it till Array[low] = data

void Low_index(int A[] , int size , int data)
{
	int low = 0; 
	int mid =  BSearch(A,size,data,low,size-1);
	int ans = -1;
	while (1)
	{ 
	  ans = mid;
	  mid = BSearch(A, size, data, low, mid - 1);
	  if (mid == -1)
	  {
		  break;
	  }
	 
	}


	cout << "Lower index is " << ans << endl; 
}

void High_index(int A[], int size, int data)
{
	int low = 0;
	int mid = BSearch(A, size, data, low, size - 1);
	int ans = -1; 
	while (1)
	{
		ans = mid; 
		mid = BSearch(A, size, data, mid+1, size - 1);
		if(mid ==-1)
		{
			break;
		}
	}
	cout << "High index is " << ans<<endl; 
}

int main()
{

	int A[] = { 1,1,2,2,2,3,4,5,5,6 }; 
	int s = sizeof(A) / sizeof(A[0]);
	display(A, s);
	BSearch(A,s,2,0,s-1);
	Low_index(A,s,2);
	High_index(A,s,2);
	
	return 0; 

}
