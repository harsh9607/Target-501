// Kth Level Finder
#include<iostream>
#include<stack>
#include<queue>
using namespace std; 

class node
{
public:
	int data; 
	node* left; 
	node* right; 
	// Constructor
   node() :data(0), left(NULL), right(NULL)
		{}
};

class BinaryTree
{
public: node* root; 
	   BinaryTree() :root(NULL) 
		{}
	  ~BinaryTree()
		{}
	  
	  void Additem(int A[], char B[], int size_A , int size_B , stack<node*> S)
	  {   
		  int k = 0;
		  for (int i = 0; i < size_B; i++)
		  {
			  if (B[i] == 'O')
			  {
				  node* temp = new node; 
				  temp->data = A[k]; 
				  root = temp; 
				  S.push(root); 
				  k++; 
			  }

			  else if (B[i] == 'L')
			  {   
				  node* temp = new node; 
				  temp->data = A[k]; 
				  k++;
				  S.top()->left = temp; 
				  S.push(temp); 
			  }


			  else if (B[i] == 'R')
			  {
				  node* temp = new node;
				  temp->data = A[k];
				  k++;
				  S.top()->right = temp;
				  S.push(temp);
			  }

			  else if (B[i] == 'P')
			  {
				  S.pop(); 
			  }

		  }
			  
	  }
	   
	  void Display(node* r)
	  {  
		  if (r != NULL) {
			  
			  cout << "Node: " << r->data << " -> L :  ";
			  if(r->left!=NULL)
			  {
				  cout << r->left->data << ",\t"; 
			  }
			  else
			  {
				  cout << "NULL,  "; 
			  }
			  if (r->right != NULL)
			  {
				  cout<<"R:" << r->right->data << ";\n";
			  }
			  else
			  {
				  cout << "R: NULL;\n"; 
			  }
			  
			  Display(r->left);
			  Display(r->right);
		  }
		  else
		  {
			  return;
		  }
	  }

	

	  void Klevelprint(node* r, queue<node* >& Q, queue<node*>& Q2 , int k)
	  {
		  node* temp = r;
		  if (temp != NULL)
		  {

			  if (Q.empty())
			  {
				  Q.push(temp);
			  }

			  if (k == 0)
			  {
				  while (!Q.empty())
				  {
					  cout << Q.front()->data << "\t"; 
					  Q.pop();
				  }
			  }
			  else 
			  {
				  while (!Q.empty())
				  {
					  if(Q.front()->left != NULL)
					  Q2.push(Q.front()->left);
					  
					  if (Q.front()->right != NULL)
					  Q2.push(Q.front()->right);

					  Q.pop();
				  }

				  while (!Q2.empty())
				  {
					  Q.push(Q2.front());
					  Q2.pop(); 
				  }
				  k--; 
				  if (!Q.empty())
					  Klevelprint(Q.front(), Q, Q2, k);
			  }

		  }
	  }

};


int main()
{    
	int A[] = { 50 , 25 ,12,  37,30 , 75,62,70,87}; 
	char B[] = { 'O' , 'L' , 'L' , 'P', 'R', 'L' , 'P' , 'P' , 'P', 'R' ,'L' ,'R' , 'P', 'P' , 'R' };
	BinaryTree T;
	stack<node*> S; 
	int s_A = sizeof(A) / sizeof(A[0]); 
	int s_B = sizeof(B) / sizeof(B[0]); 
	
	T.Additem(A, B, s_A, s_B ,S) ;
	
	T.Display(T.root);
	
	queue<node*> Q,Q2; 
	int k = 1;
	for (int i = 0; i < 4; i++)
	{
		cout << "@ level " << i << " we have : "; 
		T.Klevelprint(T.root, Q, Q2, i);
		cout << '\n';
	}
	return 0;
}
